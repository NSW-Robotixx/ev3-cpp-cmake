# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
      
env:  
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
      
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: [self-hosted]  
    steps: 
    - uses: actions/checkout@v3  
    - uses: turtlebrowser/get-conan@main

    - name: Conan version
      run: echo "${{ steps.conan.outputs.version }}"

    - name: Configure CMake  
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # run: cmake -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -S${{github.workspace}} -B${{github.workspace}}/build -G "Unix Makefiles"
      run: cd ${{github.workspace}} && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release

    - name: Build  
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config Release

    - name: Run
      run : ${{github.workspace}}/build/FullTest
    
    - name: Setup Pages  
      uses: actions/configure-pages@v5
    
    - name: Upload artifact  
      uses: actions/upload-pages-artifact@v3
      with:
        path: '${{github.workspace}}/build/doc/html'
    
    - name: Deploy to GitHub Pages    
      id: deployment
      uses: actions/deploy-pages@v4


  build-ubuntu:
          # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
          # You can convert this to a matrix build if you need cross-platform coverage.
          # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
  
    steps:
    - uses: actions/checkout@v3  
    - uses: turtlebrowser/get-conan@main
    - uses: ssciwr/doxygen-install@v1
  
    - name: Conan version
      run: echo "${{ steps.conan.outputs.version }}"
  
    - name: Configure CMake  
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_BUILD_TYPE=Release -S${{github.workspace}} -B${{github.workspace}}/build -G "Unix Makefiles"
      # run: cd ${{github.workspace}} && mkdir build && cd build && cmake .. 
  
    - name: Build  
      # Build your program with the given configuration
      run: make -C ${{github.workspace}}/build
  
    - name: Run
      run : ${{github.workspace}}/build/FullTest

  


