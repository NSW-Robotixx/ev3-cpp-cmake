# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3

    - name: Conan installation
      id: conan
      uses: turtlebrowser/get-conan@v1.0

    - name: Fetch Conan deps
      run: conan profile detect --force

#     - name: Cache Conan Dependencies
#       id: cache-conan
#       uses: actions/cache@v2
#       with:
#         path: path/to/.conan2
#         key: "conan-key"
# # if we did hit the cache, then you do not want to create a new default  
# # profile since you already have one
#     - if: ${{steps.cache-conan.outputs.cache-hit != 'true'}}
#       name: Create default Conan profile
#       run: conan profile detect --force

    # - name: Conan profile update
    #   run:  |
    #         conan profile update settings.compiler=gcc default
    #         conan profile update settings.compiler.cppstd=20 default
    #         conan profile update conf.tools.cmake.cmaketoolchain:generator=Ninja default
    #         conan profile show default

    - name: Conan install dependencies
      run:  conan install ${{github.workspace}} --output-folder=build --build=missing

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=generators/conan_toolchain.cmake -S${{github.workspace}} -B${{github.workspace}}/build/build/Release -G "Unix Makefiles"

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build/build/Release --config ${{env.BUILD_TYPE}}

    - name: Run
      run : ${{github.workspace}}/build/build/Release/FullTest

